#include <stdio.h>
#include <stdlib.h>

// Structure to represent a node in the adjacency list
struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};

// Structure to represent the adjacency list of the graph
struct AdjList {
    struct AdjListNode* head;
};

// Structure to represent a graph
struct Graph {
    int V;
    struct AdjList* array;
};

// Function to create a new adjacency list node
struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with V vertices
struct Graph* createGraph(int V) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    if (graph == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }
    graph->V = V;

    // Create an array of adjacency lists.  Size of the array will be V
    graph->array = (struct AdjList*)malloc(V * sizeof(struct AdjList));
    if (graph->array == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }

    // Initialize each adjacency list as empty by making head as NULL
    for (int i = 0; i < V; ++i)
        graph->array[i].head = NULL;

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest.  A new node is added to the adjacency list of src
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;

    // Since graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest].head;
    graph->array[dest].head = newNode;
}

// Function to perform Depth First Search traversal of the graph
void DFSUtil(struct Graph* graph, int vertex, int* visited) {
    // Mark the current node as visited and print it
    visited[vertex] = 1;
    printf("%d ", vertex);

    // Recur for all the vertices adjacent to this vertex
    struct AdjListNode* iter = graph->array[vertex].head;
    while (iter != NULL) {
        int adjVertex = iter->dest;
        if (!visited[adjVertex])
            DFSUtil(graph, adjVertex, visited);
        iter = iter->next;
    }
}

void DFS(struct Graph* graph, int startVertex) {
    // Array to keep track of visited vertices
    int* visited = (int*)malloc(graph->V * sizeof(int));
    if (visited == NULL) {
        printf("Memory allocation failed\n");
        exit(1);
    }

    // Initialize all vertices as not visited
    for (int i = 0; i < graph->V; ++i)
        visited[i] = 0;

    // Call the recursive helper function to print DFS traversal
    DFSUtil(graph, startVertex, visited);

    free(visited);
}

int main() {
    // Create a graph given in the example
    int V = 6;
    struct Graph* graph = createGraph(V);
    addEdge(graph, 0, 1);
    addEdge(graph, 0, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 1, 4);
    addEdge(graph, 2, 4);
    addEdge(graph, 3, 4);
    addEdge(graph, 3, 5);
    addEdge(graph, 4, 5);

    printf("Depth First Traversal starting from vertex 0: ");
    DFS(graph, 0);

    return 0;
}
