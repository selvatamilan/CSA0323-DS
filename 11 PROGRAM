#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100

// Structure to represent a stack
struct Stack {
    int items[MAX_SIZE];
    int top;
};

// Function to initialize a stack
void initialize(struct Stack *s) {
    s->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *s) {
    return (s->top == -1);
}

// Function to check if the stack is full
int isFull(struct Stack *s) {
    return (s->top == MAX_SIZE - 1);
}

// Function to push an element onto the stack
void push(struct Stack *s, int value) {
    if (isFull(s)) {
        printf("Stack overflow\n");
        return;
    }
    s->top++;
    s->items[s->top] = value;
}

// Function to pop an element from the stack
int pop(struct Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow\n");
        exit(1);
    }
    int popped = s->items[s->top];
    s->top--;
    return popped;
}

// Function to peek the top element of the stack
int peek(struct Stack *s) {
    if (isEmpty(s)) {
        printf("Stack is empty\n");
        exit(1);
    }
    return s->items[s->top];
}

int main() {
    struct Stack s;
    initialize(&s);

    // Pushing elements onto the stack
    push(&s, 10);
    push(&s, 20);
    push(&s, 30);

    // Peeking and popping elements from the stack
    printf("Top element of stack: %d\n", peek(&s));
    printf("Popped element: %d\n", pop(&s));
    printf("Top element of stack after pop: %d\n", peek(&s));

    return 0;
}
