#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define MAX_SIZE 100

// Structure to represent a stack
struct Stack {
    int items[MAX_SIZE];
    int top;
};

// Function to initialize a stack
void initialize(struct Stack *s) {
    s->top = -1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *s) {
    return (s->top == -1);
}

// Function to check if the stack is full
int isFull(struct Stack *s) {
    return (s->top == MAX_SIZE - 1);
}

// Function to push an element onto the stack
void push(struct Stack *s, int value) {
    if (isFull(s)) {
        printf("Stack overflow\n");
        return;
    }
    s->top++;
    s->items[s->top] = value;
}

// Function to pop an element from the stack
int pop(struct Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow\n");
        exit(1);
    }
    int popped = s->items[s->top];
    s->top--;
    return popped;
}

// Function to evaluate postfix expression
int evaluatePostfix(char *expression) {
    struct Stack s;
    initialize(&s);

    // Traverse through each character of the expression
    for (int i = 0; expression[i] != '\0'; i++) {
        char ch = expression[i];

        // If the character is a digit, push it onto the stack
        if (isdigit(ch)) {
            push(&s, ch - '0');
        } else {
            // If the character is an operator, pop two operands from the stack,
            // perform the operation, and push the result back onto the stack
            int operand2 = pop(&s);
            int operand1 = pop(&s);
            switch (ch) {
                case '+':
                    push(&s, operand1 + operand2);
                    break;
                case '-':
                    push(&s, operand1 - operand2);
                    break;
                case '*':
                    push(&s, operand1 * operand2);
                    break;
                case '/':
                    push(&s, operand1 / operand2);
                    break;
                default:
                    printf("Invalid operator\n");
                    exit(1);
            }
        }
    }
    // The result is the only element left in the stack
    return pop(&s);
}

int main() {
    char expression[MAX_SIZE];

    printf("Enter a postfix expression: ");
    fgets(expression, MAX_SIZE, stdin);

    int result = evaluatePostfix(expression);
    printf("Result: %d\n", result);

    return 0;
}
